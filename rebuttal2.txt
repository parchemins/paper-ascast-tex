We thank the three reviewers for their thorough reading and
interesting comments. We hope that our response will clarify all of
their interrogations. 

* About motivation and practical application: (TODO) Add reference to Bastien's paper

Our primer target, as the title states, is distributed content
indexing, and more specifically, its content location
service. "Retrieving a content location may actually take more time
than retrieving the content itself."  As an example, consider Alice
from Europe who wants to download a video. She first needs to know
where to download it from. Therefore, she asks to a content location
service that is unfortunately, centralized, and hosted in Australia.
After a round-trip of messaging, she realizes that she wasted time
since the video, or a replica of it, was next to her in Europe all
along.

One might think that distributing the indexing service in Europe using
DHTs would be sufficient to avoid this pitfall. However, DHTs do not
colocate content and location services. Therefore, despite having a
DHT node in Europe, the one that actually knows where to find the
video is still in Australia. Alice still wastes time.

Content delivery networks (CDN) is most often the solution. However,
it requires a priori configuration. Missconfigured CDN still makes
Alice search for her content location in Australia.

On the opposite, using our approach, the node in Europe automatically
knows its closest content location. When Alice asks for the video, she
asks to the European node that answer her immediately with the video
hosted in Europe. 

Our approach is not limited to content indexing, and generalizes to
any replicated service. On a side note, it even constitutes an
efficient way to perform multi-destinations shortest path in dynamic
graphs.

** Action: We agree with Reviewer 1. We add such running example
throughout the paper, thus complementing the text description of
figures, to further help the reader.


* About failure detection: We agree with Reviewer 2 that implementing
link failure detection is often done using heartbeats. Our approach is
built on top of such links and benefits, as many other running
protocols, from such failure detection. Since this is a shared overhead,
we do not account it as being part of our protocol. // (TODO) better wording
** Action: We clarify this requirement and its implication on the overhead.

* About crash recovery: Crashes may have immediate impact
on neighboring nodes depending on their crash detection speed.
Therefore, a node must always restart anew, thus retrieving and
propagating relevant information again.
** Side note: There exists a trade-off between convergence speed and
and generated traffic when buffering incoming messages and only
propagating most relevant ones. We kept this out of scope for the
sake of simplicity.

* About the experiments: PeerSim, despite being old, remains a
flexible framework to run large scale simulations. It fits our goal of
isolating the behavior of our protocol under desired circumstances.
Nevertheless, we agree with Reviewer 1 that more realistic
configurations are of interest. We left this as future work, where we
would like to replace the DHT of IPFS by our protocol, and deploy it
on a real distributed infrastructure.

** About Figure 7 link: We agree with Reviewer 2 that a single
intercontinental link is not realistic, however this allows us
to confirm and highlight the very important property that our
protocol works even in a network with physical partitions. // (TODO) more ?
** About Figure 7 time: We use simulated time as x-axis to highlight that
the convergence speed depends on the simulated latency between links.
** Action: Use both cycle and simulated time as x-axis label.
** About simulated time and real network conditions: we only simulated 
the link latency using event-based PeerSim, i.e., the number of cycles
(simulated milliseconds to help human understanding) between the
sending of a message and its receipt by a neighbor. Other network conditions
such as hardware limitations, packet loss, would indeed increase convergence
time, but we expect it to remain in the same order of magnitude when not catastrophic.
// (TODO) rewrite thisâ€¦

** Comparison with state-of-the-art: As stated in Related Work,
state-of-the-art approaches have shortcomings that disqualify them as
contender in our context: Centralized and DHT approaches have slow
response time; vector-based routing and replicated stores flood the
whole network; timeout-based, random walks, and spanning forests are
cycle-based which never-endlessly floods the network.

// 582 words [2022-06-01 Mer] 11:58
